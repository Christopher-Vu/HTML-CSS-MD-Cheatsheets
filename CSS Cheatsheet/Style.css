/*Classes and ids style a specific element in a CSS page (that element specifically, not
all elements of that type). To reference and style a class, use a . followed by the name*/
.title {
    color: red;
}

.subtitle {
    color: blue;
}

/*To reference an id, use a hash*/
#contact-us {
    color: green;
}

/*
SPECIFICITY IN CSS
Specificity is a concept referring to the face that if one element is styled multiple
times, the prevailing style (that will show on screen) is the one that is the most specific.
The order for specificity is headers, class selectors, id selectors, and inline styling.
*/

/*PSEUDOCLASSES or PSEUDOSELECTORS
Deals with interactivity; any time a design needs to change based on a way that the user
interacts with it. You use the name of the element followed by a colon and the action*/
h2:hover {
    color: red;
}

/*When selecting an element from a list of children, you use the child as the element name
instead of the parent (ex: the first child of an unordered list is li:first-child, not ul:first-child)*/
li:first-child {
    color: steelblue;
}

/*This can also be done with nth-child, which does as it says*/
li:nth-child(2) {
    color:aqua;
}

/*Only works if the element is an only child*/
li:only-child {
    color: purple;
}

/*The link refers to a link before it is clicked, and visited is a link after it is visited*/
#google-link:link {
    color: blue;
}


#google-link:visited {
    color: red;
}

/*all pseudoselectors or pseudoclasses https://www.w3schools.com/css/css_pseudo_classes.asp*/


/*ADVANCED SELECTORS*/

/*This means "every a tag that follows an h2"; it will style that element no matter the class*/
h2 + a {
    color : red;
}

/*This means every "button follows by a text area in the same parent"; it will style that element 
only if in the same class*/
textarea ~ button {
    color:purple;
}

/*This means every "li inside of a ul"; note that the li must be a direct child of the ul*/
ul > li {
    color: blue;
}

/*Any li that goes up to (propogates up to) a ul; the li does not need to be a direct child of the ul*/
ul li {
    color: green;
}

/*ATTRIBUTE SELECTORS*/

/*Attribute selectors allow you to select certain elements based on their attribtues*/
/*The format is:    element[attribute=value]   */
/*The carrot (^=) selects everything in which the attribute STARTS with the desired value*/
img[src^="Other Files"] {
    border: 30px solid black;
}

/*The dollar sign ($=) selects everything in which the attribute ENDS with the desired value*/
img[src$="house.jpg"] {
    border: 20px solid black;
}

/*Self explanitory*/
img[src="Other Files/mountains.jpg"] {
    border: 10px solid black;
}

/*Whitespace property; by adding a space in a class, the two (or more) names are treated as 
separate classes applied to the same element; it is selected via this format
element_name[selector~=name]*/
h2[class~=article-subtitle] {
    background: forestgreen
}

/*PROPERTIES*/
/*All properties use a colon and a semicolon. Before the colon is the property (what is going 
to change, and before the semicolon is the value)*/
#services {
    color: green; /*<--- this is the property part*/
    /*Note you can put multiple properties*/
}

/*COLORS*/
#title {
    color: rgb(186, 133, 9);
}

/*Note that the body contains all other tags and text, so body can be used for background*/
body {
    background: rgb(204, 229, 255);
}

/*BACKGROUNDS*/
/*This code is not run because it is incomplete*/
/*
body {
    background: url("https://images.unsplash.com/photo-1562043236-559c3b65a6e2?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NHx8bGFuZHNjYXBlc3xlbnwwfHwwfHw%3D&w=1000&q=80")
}
*/
/*Note that the image will repeat the image over rather than resizing it to fit the page*/
/*The url can also be a file directory*/

/*"example_background" is an empty div that I am using to demonstrate backgrounds*/
#example-background {
    height: 400px;
    width: 70%;

    background: url("https://images.unsplash.com/photo-1562043236-559c3b65a6e2?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NHx8bGFuZHNjYXBlc3xlbnwwfHwwfHw%3D&w=1000&q=80");
    background-repeat: no-repeat ;
    /*^^^ will leave the image as it's original size; IT WILL NOT RESIZE TO FIT, ONLY DISABLE THE REPEAT*/
    background-size: 400px 70%;
    /*^^^ Will resize to whatever value you input, but often will not match the height and width of the div exactly */
    background-size: contain;
    /*^^^ Will resize to fit the dimensions, but will not change the proportions of the image*/
    background-size: cover;
    /*^^^ Will resize to fit the dimensions (WILL NOT change proportions, it CUTS OFF the image).*/
}

/*For changing transparency, use an rgba value (rgb and alpha). Example below*/
/*rgba(256, 256, 256, 0.4);*/

#linear-gradient-example {
    height: 150px;
    width: 70%;

    /*linear-gradient() does exactly as it says; the first parameter is the direction of the gradient, and 
    the rest of the parameters are the colors that the gradient goes through*/
    background: linear-gradient(to top right, red, steelblue, blue);
    background-size: cover;
    /*Note that the direction of the gradiant can also be set with degrees*/
    background: linear-gradient(215deg, red, steelblue, blue);
}

#radial-gradient-example {
    height: 150px;
    width: 70%;

    /*radial-gradient() starts at the center and moves to the edges. It also allows you to set proportions for the colors*/
    /*In the first parameter, you can type either "ellipse" or "circle" (ellipse is the default) to change the way the gradient behaves.*/
    background: radial-gradient(red 20%, steelblue 40%, blue 55%)
}

/*UNITS*/

/*There are two types of units, absolute and relative.*/
/*Absolute units are things like mm, cm, inches, etc.; they are the same size on every display*/
/*Relative units, like percentages, will take up the same ratio no matter the display.*/
/*Pixels are technically absolute, but will adjust somewhat to the display that they are on (by taking up multiple pixels of the display
for each pixel of the image if the display is too large).*/

#units-example {
    height: 10vh; /*vh is a unit where 1 vh is 1% of the HEIGHT viewport; the viewport is just how much space you see when loading the site*/
    width: 10vw; /*Same thing as vh but width*/
    width: 70%; /*Simply takes up a percentage of the parent element*/
    font-size: 2em; /*em is just a factor of the standard size; this would mean set font size to double the standard font size*/
}

/*TEXT MANIPULATION*/
.link{
    text-decoration: underline; /*this can also be set to overline, line-through, or none*/
    text-transform:uppercase; /*self explan; can also be changed to lowercase, caps, etc.*/
}

body {
    text-align: justify; /*This can be set to left, right, center, or justify. First three are self
    explanitory, and justify makes all text stretch to the same width*/
    font-size: 2em; /*self explan*/
}

#title {
    font-weight: 800; /*Changes bolding (default is ~400)*/
}

.italics {
    font-style: italic; /*3 modes; normal, italics, and oblique*/
}

/*3 types of fonts; 
serif: Small stylistic lines at the end of some letters. Often used in papers or essays. (Times new roman/georgia)
sans-serif: Doesn't have those lines; easier readability. (arial/calibri)
monospace: All characters take up the same width. (courier new)*/

body {
    font-family: serif; /*This is how you declare a font family*/
    font-family: "Courier New", serif; /*This means use times new roman if it is avaiable, and if not, use serif*/
}

/*https://fonts.google.com/ at this site, you can stylize and download fonts*/
/*In order to import a font to be used, simply paste the link tag that google gives you above 
the style sheet tag*/
/*the font-family: font attribute can also be added to any elemenet that uses a font*/

/*BOX MODEL*/
/*Each element has, surrounding it, the padding, border, and margin*/
/*The padding is directly outside of the content, and gives space between the content and the border*/
/*The border is the divide between the padding and margin; doesn't take up any space on its own, but it can be
styled to do so*/
/*The margin is the space between the border and all other content; padding makes internal space, the margin makes external space*/

/*By clicking on the icon in the F12 Menu that displays a screen, you can see how your design
will look on different devices*/

/*Borders*/
img[src$="mountains.jpg"] {
    border: 10px dotted rgb(154, 174, 200);
}
/*Most of the above is pretty self explanitory; the 10px is the thickness of the border,
the 'dotted attribute is the style of the border (can also be solid, dashed, or double)',
and the color is the color*/

/*Margin and Padding*/

img[src$="mountains.jpg"] {
    padding: 20px;
    /*If the padding is only 1 value, that value will be consistent on all sides of the element*/
    margin: 40px;
    /*Same thing but instead of being under the border, it's outside of it*/
}

img[src$="house.jpg"]{
    padding-right: 20px;
    padding-top: 100px;
    padding-bottom: 5px;
    /*Pretty self explanitory*/
}

img[src$="marguerite.jpg"]{
    padding: 100px 40px 5px 0px;
    /*You can enter the padding on the four sides as such; the order is top, right, bottom, left*/
    /*Same can be done with margin*/
}

/*Float and Display Types*/
/*float will move an element in a certain direction and move all other elements below upwards to fill 
the empy space that it leaves*/
.link {float: right;}

img[src$="mountains.jpg"]{
    float: right;
}

/*You can set floats as "inherit", which will take the float property of the parent element*/
/*You can also set float as "none", which is self explanitory*/

/*Display types change the way that elements look*/

/*display:none removes the element entirely; doesn't take up any space*/
/*Good for hidden elements (obviously)*/
.example-table{
    display:none;
}

/*display:block; brings on different line
display:inline; brings on the same line, but this does not let the height, margin-top and bottom,
padding-top and buttom to be individually set for each element.*/
.example-table{
    display:inline-block; /*lets your bring everything to inline and also define their indivdual height, 
    margin-top and bottom and padding-top and bottom display:inline-block puts block level spacing around 
    an inline element*/
    padding-left: 10%; /*not possible without inline-block*/
}

/*FLEXBOX*/
/*An alternative to the boc model; allows you to arrange items*/
/*Each flexbox element is split into the container and the items*/
/*The container is the parent element; usually a form of div*/
/*Flex items are child elements of the container; make up the contents of the box*/

.container {
    background-color: rgb(250, 250, 250);
    margin: 10px;
    height: 300px;

    display: flex; /*This is what makes it a flex box*/
    flex-direction: column-reverse; /*row or column; row is the default. column moves each element downwards to fit more
    elements, while row moves each element to the right. adding reverse to the end will reverse the items*/
    flex-direction: row; /*resetting value*/

    flex-wrap: wrap; /*when an item is wrapped, it is moved to a new row or column to prevent exceeding the maximum length*/
    /*Possible values are "wrap" and "no-wrap", and "wrap-reverse"*/

    justify-content: space-around; /*justifies content on the horizontal axis; "flex-start" ==> left, "center" ==> middle, "flex-end" ==> right*/
    /*"space-between" ==> equal space between each item, "space-around" does the same but also creates space at the edges*/

    align-items: center; /*Does the same thing as justify but on the vertical axis; flex-start, center, and flex-end still work*/
    /*"stretch" stretches them across the whole container, while "baseline" aligns them all to a baseline (regardless of original size)*/

    /*Note that in the html an order style can be used to order them without changing the position of the divs*/
    /*Check html sheet for flex-grow, flex-shrink, and flex-basis*/
}

.container-item {
    background: rgb(36, 130, 39);
    color: white;
    font-size: 25px;
    text-align: center;

    width: 70px;
    line-height: 50px;
    margin: 10px;
}

.grid-container {
    background-color: rgb(250, 250, 250);
    margin: 10px;
    height: 300px;

    /*defines a grid layout*/
    display: grid;
    /*Auto just means evenly divide the space*/
    grid-template-columns: auto auto auto;
    /*Number of columns/rows is automatically set to how many widths are defined*/
    grid-template-rows: 100px 200px;
}

.grid-item {
    color: black;
    font-size: 25px;
    text-align: center;

    width: 70px;
    line-height: 40px;
    margin: 10px;
}